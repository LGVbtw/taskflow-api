openapi: 3.0.3
info:
  title: Taskflow API
  version: 1.0.0
  description: API pour gérer des tâches (Taskflow). Documentation auto-générée.
paths:
  /api/schema/:
    get:
      operationId: api_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/tasks/:
    get:
      operationId: api_tasks_list
      description: |-
        ViewSet fournissant list, retrieve, create, update et delete pour Task.

        Endpoints (fournis par ModelViewSet) :
            - list : GET /tasks/ -> liste paginée de tâches
            - retrieve : GET /tasks/{pk}/ -> tâche unique
            - create : POST /tasks/ -> création
            - update/partial_update : PUT/PATCH /tasks/{pk}/ -> modification
            - destroy : DELETE /tasks/{pk}/ -> suppression (voir restrictions)

        Fonctionnalités :
            - recherche sur `title` et `status` via `?search=` (DRF SearchFilter).
            - tri via `?ordering=created_at` ou `?ordering=title`.
            - filtrage par statut via `?status=` (DjangoFilterBackend).

        Personnalisations :
            - À la création, si l'utilisateur est authentifié, le champ `owner` est
              défini sur cet utilisateur ; sinon il reste à None.
            - La suppression d'une tâche dont `status` == "En cours" est interdite
              et lève `TaskInProgressDeletionError`.
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskList'
          description: ''
    post:
      operationId: api_tasks_create
      description: |-
        ViewSet fournissant list, retrieve, create, update et delete pour Task.

        Endpoints (fournis par ModelViewSet) :
            - list : GET /tasks/ -> liste paginée de tâches
            - retrieve : GET /tasks/{pk}/ -> tâche unique
            - create : POST /tasks/ -> création
            - update/partial_update : PUT/PATCH /tasks/{pk}/ -> modification
            - destroy : DELETE /tasks/{pk}/ -> suppression (voir restrictions)

        Fonctionnalités :
            - recherche sur `title` et `status` via `?search=` (DRF SearchFilter).
            - tri via `?ordering=created_at` ou `?ordering=title`.
            - filtrage par statut via `?status=` (DjangoFilterBackend).

        Personnalisations :
            - À la création, si l'utilisateur est authentifié, le champ `owner` est
              défini sur cet utilisateur ; sinon il reste à None.
            - La suppression d'une tâche dont `status` == "En cours" est interdite
              et lève `TaskInProgressDeletionError`.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
  /api/tasks/{id}/:
    get:
      operationId: api_tasks_retrieve
      description: |-
        ViewSet fournissant list, retrieve, create, update et delete pour Task.

        Endpoints (fournis par ModelViewSet) :
            - list : GET /tasks/ -> liste paginée de tâches
            - retrieve : GET /tasks/{pk}/ -> tâche unique
            - create : POST /tasks/ -> création
            - update/partial_update : PUT/PATCH /tasks/{pk}/ -> modification
            - destroy : DELETE /tasks/{pk}/ -> suppression (voir restrictions)

        Fonctionnalités :
            - recherche sur `title` et `status` via `?search=` (DRF SearchFilter).
            - tri via `?ordering=created_at` ou `?ordering=title`.
            - filtrage par statut via `?status=` (DjangoFilterBackend).

        Personnalisations :
            - À la création, si l'utilisateur est authentifié, le champ `owner` est
              défini sur cet utilisateur ; sinon il reste à None.
            - La suppression d'une tâche dont `status` == "En cours" est interdite
              et lève `TaskInProgressDeletionError`.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this task.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    put:
      operationId: api_tasks_update
      description: |-
        ViewSet fournissant list, retrieve, create, update et delete pour Task.

        Endpoints (fournis par ModelViewSet) :
            - list : GET /tasks/ -> liste paginée de tâches
            - retrieve : GET /tasks/{pk}/ -> tâche unique
            - create : POST /tasks/ -> création
            - update/partial_update : PUT/PATCH /tasks/{pk}/ -> modification
            - destroy : DELETE /tasks/{pk}/ -> suppression (voir restrictions)

        Fonctionnalités :
            - recherche sur `title` et `status` via `?search=` (DRF SearchFilter).
            - tri via `?ordering=created_at` ou `?ordering=title`.
            - filtrage par statut via `?status=` (DjangoFilterBackend).

        Personnalisations :
            - À la création, si l'utilisateur est authentifié, le champ `owner` est
              défini sur cet utilisateur ; sinon il reste à None.
            - La suppression d'une tâche dont `status` == "En cours" est interdite
              et lève `TaskInProgressDeletionError`.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this task.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Task'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    patch:
      operationId: api_tasks_partial_update
      description: |-
        ViewSet fournissant list, retrieve, create, update et delete pour Task.

        Endpoints (fournis par ModelViewSet) :
            - list : GET /tasks/ -> liste paginée de tâches
            - retrieve : GET /tasks/{pk}/ -> tâche unique
            - create : POST /tasks/ -> création
            - update/partial_update : PUT/PATCH /tasks/{pk}/ -> modification
            - destroy : DELETE /tasks/{pk}/ -> suppression (voir restrictions)

        Fonctionnalités :
            - recherche sur `title` et `status` via `?search=` (DRF SearchFilter).
            - tri via `?ordering=created_at` ou `?ordering=title`.
            - filtrage par statut via `?status=` (DjangoFilterBackend).

        Personnalisations :
            - À la création, si l'utilisateur est authentifié, le champ `owner` est
              défini sur cet utilisateur ; sinon il reste à None.
            - La suppression d'une tâche dont `status` == "En cours" est interdite
              et lève `TaskInProgressDeletionError`.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this task.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTask'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTask'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTask'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
          description: ''
    delete:
      operationId: api_tasks_destroy
      description: |-
        Empêche la suppression des tâches marquées "En cours".

        Lève :
            TaskInProgressDeletionError : si le statut de la tâche est "En cours".
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this task.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
components:
  schemas:
    PaginatedTaskList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Task'
    PatchedTask:
      type: object
      description: |-
        Sérialiseur pour le modèle Task.

        Représentation (champs) :
            - id : clé primaire entière (auto-générée par Django).
            - title : titre de la tâche (chaîne).
            - status : statut (une des valeurs "A faire", "En cours", "Fait").
            - created_at : date/heure ISO de création.
            - owner : nom d'utilisateur du propriétaire (read-only) ou null.

        Remarques :
            - Le champ `owner` est en lecture seule et provient de `owner.username`.
            - La validation du champ `status` est effectuée par le modèle Task.
      properties:
        id:
          type: integer
          readOnly: true
        owner:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          readOnly: true
        title:
          type: string
          maxLength: 200
        status:
          type: string
          maxLength: 20
        created_at:
          type: string
          format: date-time
          readOnly: true
    Task:
      type: object
      description: |-
        Sérialiseur pour le modèle Task.

        Représentation (champs) :
            - id : clé primaire entière (auto-générée par Django).
            - title : titre de la tâche (chaîne).
            - status : statut (une des valeurs "A faire", "En cours", "Fait").
            - created_at : date/heure ISO de création.
            - owner : nom d'utilisateur du propriétaire (read-only) ou null.

        Remarques :
            - Le champ `owner` est en lecture seule et provient de `owner.username`.
            - La validation du champ `status` est effectuée par le modèle Task.
      properties:
        id:
          type: integer
          readOnly: true
        owner:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          readOnly: true
        title:
          type: string
          maxLength: 200
        status:
          type: string
          maxLength: 20
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - owner
      - title
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
